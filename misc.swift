/*  ÙÄªí misc.swift a‚Ä§ùò¨‚Ä§a Miscell | conveniences for built stable. */

import AppKit
import Darwin.C /* as 'Posix‚Çãfraktal' alt‚Ä§ 'Posix'. */
import ClibTwinbeam

func ReapTwinbeam() {
  print("hello language-analysis-and-church")
  let pid : UInt64 = 0x17
  let val : Int32 = 0x13
  let y : Int32 = Details_in_C(pid,val)
  print("y is \(y)")
}

func Start(execute command: String, parameters: [String], path‚Çãexe: String, 
 p2c p2c‚Çãpipe: Pipe, c2p c2p‚Çãpipe: Pipe) -> Int
{
  var args = Array<String>(); let process = "/bin/zsh"
  args.append(process); args.append(command + path‚Çãexe); args += parameters
  let argv: [UnsafeMutablePointer<CChar>?] = args.map { $0.withCString(strdup) }
  defer { for case let arg? in argv { free(arg) } }
  let p2c‚Çãrd‚Çãend: FileHandle = p2c‚Çãpipe.fileHandleForReading
  let p2c‚Çãwr‚Çãend: FileHandle = p2c‚Çãpipe.fileHandleForWriting
  let c2p‚Çãrd‚Çãend: FileHandle = c2p‚Çãpipe.fileHandleForReading
  let c2p‚Çãwr‚Çãend: FileHandle = c2p‚Çãpipe.fileHandleForWriting
  let fd_p2c: (CInt,CInt) = ( p2c‚Çãrd‚Çãend.fileDescriptor, p2c‚Çãwr‚Çãend.fileDescriptor )
  let fd_c2p: (CInt,CInt) = ( c2p‚Çãrd‚Çãend.fileDescriptor, c2p‚Çãwr‚Çãend.fileDescriptor )
  /* ‚¨∑ unsafe pointer to tuple is isomorph to C language array. */
  typealias Pint = UnsafeMutablePointer<Int32>
  let buf‚Çë: Pint? = unsafeBitCast(fd_c2p, to: Pint.self)
  let buf·µ¢: Pint? = unsafeBitCast(fd_p2c, to: Pint.self)
  /* var env: (String?, String?) = ("SPAWNED_BY_TWINBEAM", nil) */
  let pid: pid_t = Twinbeam‚Çãspawn(argv[0], buf·µ¢, buf‚Çë /*, F */)
 /* ‚¨∑ a‚Ä§ùò¨‚Ä§a if posix_spawn(&chnl.pid, argv[0], &chnl.fdactions‚Çãchild, nil, 
   argv + [nil], envir) != 0 { return -1 } / * ‚¨∑ a‚Ä§ùò¨‚Ä§a 'fork' and 'execlp'. */
  if pid < 0 { return -1 }
  return 0
}

class Inter‚Çãact‚Çãand‚Çãinte‚Çãr‚Çãu‚Çãp‚Çãt { var child: Thread? 
  
  let p2c‚Çãpipe=Pipe(), c2p‚Çãpipe=Pipe() /* ‚¨∑ a‚Ä§ùò¨‚Ä§a Fifo. */
  /* var p2c‚Çãinput, c2p‚Çãoutput, c2p‚Çãerror, p2c‚Çãctrl, c2p‚Çãdicipline : Pipe */
  var output: ((Data) -> Void)?
  
  func slow‚Çãwrite‚Çãto‚Çãchild(fifo: Pipe, text: String) {
    if let symbols = text.data(using: String.Encoding.utf8) {
      fifo.fileHandleForWriting.write(symbols)
    } else { fatalError("Unable to unwrap material") }
  }
  
  @objc func print‚Çãchild‚Çãoutput(reader: FileHandle) {
    if let out = output { out(reader.availableData) }
  } /* ‚¨∑ images encoded in base-64 inside run alt‚Ä§ vspace. Image layered png, 
     and space is √°-priori dealt! */
  
  func occurrent‚Çãspawn(execute command: String, parameters: [String], out: 
    @escaping (Data) -> Void) -> Int {
   /* int status=0; int fd_p2c[2], fd_c2p[2]; 
    if (pipe(fd_p2c) == -1 || pipe(fd_c2p) == -1) { return -1; } */
    self.output = out
    let y = Start(execute: "ls", parameters: ["-l", "-a"], path‚Çãexe: "/bin/", 
     p2c: p2c‚Çãpipe, c2p: c2p‚Çãpipe)
    if y != 0 { print("Start execute failed") }
    child = Thread(target: self, selector: #selector(print‚Çãchild‚Çãoutput(reader:)), 
     object: c2p‚Çãpipe.fileHandleForReading)
    if let child = child { child.start() }
    slow‚Çãwrite‚Çãto‚Çãchild(fifo: p2c‚Çãpipe, text: "Hello world")
    return 0 /* Thread.sleep(forTimeInterval: 2.0) */
  }
  
} /* ‚¨∑ not 'struct': 'mutating' and '@objc'. */

extension NSBezierPath {
  
  convenience init(anfang: String, font: NSFont, frame rect: NSRect)
  {
    self.init()
    let textStorage = NSTextStorage(string: anfang)
    let layoutManager = NSLayoutManager()
    textStorage.addLayoutManager(layoutManager)
    let glyphRange = layoutManager.glyphRange(forCharacterRange: NSMakeRange(0, 
     anfang.count), actualCharacterRange: nil)
    move(to: NSPoint(x: 20.0, y: 20.0))
    for i in glyphRange.location..<glyphRange.location + glyphRange.length {
      let g = layoutManager.glyph(at: i, isValidIndex: nil)
      self.append(withCGGlyph: CGGlyph(g), in: font)
    }
  }
  
  var cgPath: CGPath
  {
    let path = CGMutablePath()
    var points = [CGPoint](repeating: .zero, count: 3)
    
    for i in 0 ..< self.elementCount {
      let type = self.element(at: i, associatedPoints: &points)
      switch type {
      case .moveTo:
        path.move(to: points[0])
      case .lineTo:
        path.addLine(to: points[0])
      case .curveTo:
        path.addCurve(to: points[2], control1: points[0], control2: points[1])
      case .closePath:
        path.closeSubpath()
      @unknown default: print("cgPath: unknown default")
      }
    }
    
    return path
  }
  
}

