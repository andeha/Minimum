/*  test-timeserie.cpp | code to for instance finance. (DOES‚ÇãNOT‚ÇãREQUIRE‚ÇãLIBC‚Å∫‚Å∫.) */

import ClibTwinbeam;

typedef struct timeserie Timeserie;
union historypod piecewise‚Çãaddition(union historypod x‚ÇÅ, union historypod x‚ÇÇ);
void Present(struct timeserie‚Çãentry row);
void Print(int count, struct timeserie‚Çãentry row[], int permanent[]);
void Output(int count, union historypod val[], struct Unicodes key[]);
typedef void (^Out)(char8‚Çãt * u8s, __builtin_int_t bytes);
EXT‚ÇãC void Present‚Çãtimeserie‚Çãintestinals(struct timeserie * üÖô, Out out);

UNITTEST(timeserie‚Çã1)
{
   Timeserie serie1; version‚Çãts revision;
   if (timeserie‚Çãinit(&revision,101,5,&serie1)) { return; }
   
   struct Unicodes key1 = UC("intox");
   union historypod pod1 = { .tworeal=simd_init·µ¶(1.0) };
   struct ùüΩbit‚Çãtext referen1 = { 9, KEYPUTS("LNG 49¬∫17'15'' N and LON 13¬∫3'5'' E") };
   struct timeserie‚Çãentry absolute1 = { key1, pod1, referen1 };
   if (timeserie‚Çãcreate(&absolute1,&serie1)) { return; }
   
   struct Unicodes key2 = UC("weight");
   union historypod pod2 = { .tworeal=simd_init·µ¶(100.0) }, after‚Çãcommit;
   struct ùüΩbit‚Çãtext referen2 = { 9, KEYPUTS("LNG 49¬∫17'15'' N and LON 13¬∫3'5'' E") };
   struct timeserie‚Çãentry relative1 = { key2, pod2, referen2 };
   if (timeserie‚Çãdelta(&relative1,&after‚Çãcommit,&serie1,piecewise‚Çãaddition)) { return; }
   
   Row‚Çãcompleted completed = ^(version‚Çãts revision, Entry row, int * bye) { Present(row); };
   if (timeserie‚Çãcommit(&revision,completed,&serie1,piecewise‚Çãaddition)) { return; }
   
   version‚Çãts ordin = 102;
   struct Unicodes keys[] = { key1, key2, { 6, UNICODES("milage") } };
   
   Outrow outrow = ^(int count, Entry row[], int permanent[]) {
    Print(count,row,permanent); };
   
   Outpod outpod =  ^(int count, union historypod artstate[], 
    struct Unicodes key[]) { Output(count,artstate,key); };
   
   state‚Çãbefore(3,keys,ordin,outpod,&serie1);
   
   print("\n");
   
   state‚Çãafter(3,keys,ordin,outpod,&serie1);
   
   Out out = ^(char8‚Çãt * u8s, __builtin_int_t bytes) { print("‚¨ö", Ôπüs8(u8s)); };
   
   Present‚Çãtimeserie‚Çãintestinals(&serie1,out);
   
   Present‚Çãtimeserie‚Çãtransacts(0,100,&serie1,outrow);
   
   Present‚Çãtimeserie‚Çãoverview(&serie1,outpod);
   
   timeserie‚Çãuninit(&serie1);
}

union historypod piecewise‚Çãaddition(union historypod x‚ÇÅ, union historypod x‚ÇÇ)
{
   simd_t·µ¶ inner = __builtin_simd_add·µ¶(x‚ÇÅ.tworeal,x‚ÇÇ.tworeal);
   union historypod sum = { .tworeal=inner };
   return sum;
}

void Present(struct timeserie‚Çãentry row)
{ int format=1;
   double starboard=row.entry.tworeal[1], port=row.entry.tworeal[0];
   print("‚¨ö ",Ôπüs7(row.reference.count,row.reference.keyputs));
   print("‚¨ö,‚¨ö", ÔπüF(port,format), ÔπüF(starboard,format));
   print(" ‚¨ö\n",ÔπüS(row.key.tetras,row.key.unicodes));
}

void double‚Çãdouble(struct Unicodes set, void * context) {
  union historypod * entry = (union historypod *)context;
}

void Print(int count, struct timeserie‚Çãentry row[], int permanent[])
{
  for (int i=0; i<count; i+=1) {
    if (permanent[i]) {
      Arg·¥æ key = ÔπüS(row[i].key.tetras,row[i].key.unicodes);
      void * ctxt = (void *)&(row[i].entry);
      Arg·¥æ val = ÔπüŒª‚Çãp(double‚Çãdouble,ctxt);
      print("‚¨ö: ‚¨ö\n",key,val); }
  }
}

void Output(int count, union historypod val[], struct Unicodes key[])
{
  /* print("‚¨ö ‚¨ö ‚¨ö\n", Ôπüs8(u8s)); */
}
