/*  test-accuve.c | equal-size tiles and to 100% tile-wrappable. */

import ClibTwinbeam;

UNITTEST(structa‚Çãappend)
{
   Structa tape‚Çãcount;
   unsigned bytes‚Çãper‚Çãitem=2, bytes‚Çãper‚Çãtile=2000*sizeof(unsigned);
   if (structa‚Çãinit(bytes‚Çãper‚Çãitem,bytes‚Çãper‚Çãtile,&tape‚Çãcount,Alloc)) 
   { ENSURE(false,"error in init‚Çãstructa."); }
   uint16_t material[] = { 1, 2, 3, 4, 5, 6, 7 };
   if (copy‚Çãappend‚Çãitems(7,material,&tape‚Çãcount,Alloc)) { ENSURE(false,"error in copy‚Çãappend."); }
   for (int i=0; i<7; i+=1) {
     unsigned elem = *(unsigned *)structa‚Çãat(i,&tape‚Çãcount);
     print("‚¨ö\n", Ôπüd((__builtin_int_t)elem));
   }
   deinit‚Çãstructa(&tape‚Çãcount,Fallow);
}

UNITTEST(regular‚Çãappend)
{
   Structa tape‚Çãcolor; int uninit‚Çãerror=0;
   if (init‚Çãregularpool(&tape‚Çãcolor,Alloc)) { ENSURE(false,"error in init‚Çãsymbolpool."); }
   Unicodes capture = UC("beekeeper"); Nonabsolute reference;
   if (copy‚Çãappend‚Çãonto‚Çãregular(&tape‚Çãcolor,capture.tetras,capture.unicodes,Alloc))
   { ENSURE(false,"error append‚Çãto‚Çãregular."); }
   int32_t tetra‚Çãcount=capture.tetras;
   if (regularpool‚Çãdatum‚Çãtext(&tape‚Çãcolor,tetra‚Çãcount,&reference)) 
   { ENSURE(false,"error in datum‚Çãtext."); }
   if (optional‚Çãuninit‚Çãregularpool(&tape‚Çãcolor,Fallow)) { Pultüí°(uninit‚Çãerror); }
}

struct ¬µ‚Çãnote { int occurrencies; };

UNITTEST(jot‚Çãtoken)
{ void * tree=Œ®ŒõŒ©; struct Unicodes token = UC("Twix");
   INIT init‚Çãwith‚Çãnote = ^(void * uninited) { return 1; };
   struct ¬µ‚Çãnote * onenote = (¬µ‚Çãnote *)jot(token,&tree,sizeof(¬µ‚Çãnote),Alloc,init‚Çãwith‚Çãnote);
   onenote->occurrencies = 0;
}

UNITTEST(impression‚Çãtoken)
{
   void * identities=Œ®ŒõŒ©;
   struct Unicodes token = UC("batman");
   __uint128_t fineprint = FNV1b(token.tetras*4,token.unicodes);
   void * handle‚ÇÅ = impression‚Çãstore(&identities,fineprint,Alloc);
   void * handle‚ÇÇ = impression‚Çãseek(identities,fineprint);
   ENSURE(handle‚ÇÅ == handle‚ÇÇ,"unable to find fineprint.");
}

