#  􀻒􀬭 build.ninja | artwork is the 'Minimum' application.

appname = Minimum

cpp-optflags = -g -I ../Apps/
swift-flags = -g -D DEBUG -I . 
# ⬷ the -I directory flag to tell 'swiftc' where to find a file named 
# 'module.modulemap' file and its c-only-functions to be used in Swift.
# ...and do no add -lc++ to swift-flags.
objs = ./.objs/7703a312-55A9-44da-A892-abbcf7f87654_$appname
gencdflags = -fno-rtti -fblocks -fcoroutines-ts -fno-exceptions -Wno-format  $
 -fno-signed-char -fno-builtin -Wno-c++20-designator -Wno-c99-designator     $
 -Wincomplete-umbrella -Wmodule-conflict -Wno-nullability-completeness
moduleflags = -fmodules-ts -fimplicit-modules                                $
 -fmodule-map-file=./ClibTwinbeam/module.modulemap
commandline-sdkpath = /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk
tmacr-version = 
# -mmacosx-version-min=11.5
macoscflags_commandline = -isysroot $commandline-sdkpath $tmacr-version
macoscflags = $macoscflags_commandline
sha1git = `git log -1 '--pretty=format:%h'`
cflags = $cpp-optflags -DSHA1GIT=\"$sha1git\" $macoscflags
macos-compiler-c = xcrun clang $gencdflags $moduleflags
macos-compiler-swift = xcrun swiftc 
# -DSHA1GIT=\"$sha1git\" 
#  swiftc -module-name <value> -enable-experimental-cxx-interop
librarian-mac = xcrun ar

rule cc
  command = $macos-compiler-c -std=c++20 -MD -MF $out.d $cflags -c $in -o $out
  description = C++20 $out
  depfile = $out.d
  deps = gcc

rule ccms
  command = $macos-compiler-c -std=c++20 -MD -MF $out.d $cflags -o $out      $
   -fms-extensions -c $in
  description = C++20 $out
  depfile = $out.d
  deps = gcc

rule c
  command = $macos-compiler-c -std=c2x -MD -MF $out.d $cflags -c $in -o $out
  description = C2x $out
  depfile = $out.d
  deps = gcc

rule objc
  command = $macos-compiler-c -MD -MF $out.d $cflags -c $in -o $out
  description = Obj-C $out
  depfile = $out.d
  deps = gcc

rule primary-compile-macswift
  command = $macos-compiler-swift $swift-flags -o $out $in                   $
   ./Releases/libClibTwinbeam.a

rule assemble-macapp
  command = rm -rf Minimum.app                                             ; $
   mkdir $appname.app                                                      ; $
   mkdir $appname.app/Contents                                             ; $
   mkdir $appname.app/Contents/MacOS                                       ; $
   mkdir $appname.app/Contents/Resources                                   ; $
   cp macos-content/Info.plist $appname.app/Contents/                      ; $
   cp macos-content/PkgInfo $appname.app/Contents/                         ; $
   cp macos-content/$appname.icns $appname.app/Contents/Resources/         ; $
   mv Minimum $appname.app/Contents/MacOS/$appname

rule library
  command = $librarian-mac rcs Releases/$out\_$sha1git.a $in               ; $
  ln -f Releases/$out\_$sha1git.a Releases/$out.a                          ; $
  printf $sha1git

build $objs/account-italian-1.o: c ClibTwinbeam/account-italian-1.c
build $objs/account-italian-2.o: c ClibTwinbeam/account-italian-2.c
build $objs/amend-tape.o: c ClibTwinbeam/amend-tape.c
build $objs/arabic-edit.o: c ClibTwinbeam/arabic-edit.c
build $objs/cubist-codex.o: c ClibTwinbeam/cubist-codex.c
build $objs/chrono-logy.o: c ClibTwinbeam/chrono-logy.c
build $objs/float-short.o: c ClibTwinbeam/float-short.c
build $objs/kiddle-table.o: c ClibTwinbeam/kiddle-table.c
build $objs/lock-attempt.o: c ClibTwinbeam/lock-attempt.c
build $objs/o-binary.o: c ClibTwinbeam/o-binary.c
build $objs/queue-invent.o: c ClibTwinbeam/queue-invent.c
build $objs/round-fixed.o: c ClibTwinbeam/round-fixed.c
build $objs/search-symbol.o: c ClibTwinbeam/search-symbol.c
build $objs/semantic-block.o: c ClibTwinbeam/semantic-block.c
build $objs/symbol-texts.o: c ClibTwinbeam/symbol-texts.c
build $objs/thread-fork.o: c ClibTwinbeam/thread-fork.c
build $objs/tiles-map.o: c ClibTwinbeam/tiles-map.c
build $objs/x-error-stack.o: c ClibTwinbeam/x-error-stack.c
build $objs/x-partial-referen.o: c ClibTwinbeam/x-partial-referen.c
# build $objs/recoll-transmit.o: c ClibTwinbeam/recoll-transmit.c
build $objs/decalogue.o: cc ClibTwinbeam/decalogue.cpp
build $objs/eight-utf.o: cc ClibTwinbeam/eight-utf.cpp
build $objs/endian-base.o: cc ClibTwinbeam/endian-base.cpp
build $objs/present-print.o: cc ClibTwinbeam/present-print.cpp
build libClibTwinbeam: library $objs/account-italian-1.o                     $
 $objs/account-italian-2.o $objs/amend-tape.o $objs/arabic-edit.o            $
 $objs/chrono-logy.o $objs/cubist-codex.o $objs/float-short.o                $
 $objs/kiddle-table.o $objs/lock-attempt.o $objs/o-binary.o                  $
 $objs/queue-invent.o $objs/round-fixed.o $objs/search-symbol.o              $
 $objs/semantic-block.o $objs/symbol-texts.o $objs/thread-fork.o             $
 objs/tiles-map.o $objs/x-error-stack.o $objs/x-partial-referen.o            $
 $objs/decalogue.o $objs/eight-utf.o $objs/endian-base.o                     $
 $objs/present-print.o
build $appname: primary-compile-macswift histories.swift enriching.swift     $
 main.swift Data+Base16.swift
build Minimum.app: assemble-macapp $appname
default libClibTwinbeam Minimum.app


