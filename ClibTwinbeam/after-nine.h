/*  after-9.h | 'expressive timeserie' and 'bleeding on trees'. */

/* #define EXPERIMENTâ‚‹BRIEFED */

/* rtâ‚‹namespace after9â‚‹variables { int structaâ‚‹initâ‚‹error; }; */

template <typename E> struct vector { struct structa inner; 
  consteval unsigned bytesâ‚‹perâ‚‹tile() { return sizeof(E) <= 4096 ? 4096 : sizeof(E); }
  vector() { if (structaâ‚‹init(sizeof(E),bytesâ‚‹perâ‚‹tile(),&inner)) { 
   /* PultðŸ’¡(after9-variables::structaâ‚‹initâ‚‹error); */ } }
  ~vector() { structaâ‚‹uninit(&inner); }
  E& operator[](__builtin_int_t idx) { return (E&)inner.structaâ‚‹at(idx,inner); }
  int append(const E& elem) { return inner.copyâ‚‹appendâ‚‹items(1,elem,inner); }
  __builtin_int_t count() { return 1 + (inner.structaâ‚‹bytes() - 1)/sizeof(E); }
};


