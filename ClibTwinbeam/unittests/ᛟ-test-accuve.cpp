/*  test-accuve.c | equal-size tiles and after-9 wrappable. */

import ClibTwinbeam;

UNITTEST(structaâ‚‹append)
{
   struct structa /* tapeâ‚‹ */ number;
   unsigned bytesâ‚‹perâ‚‹item=2, bytesâ‚‹perâ‚‹tile=4096;
   if (initâ‚‹structa(bytesâ‚‹perâ‚‹item,bytesâ‚‹perâ‚‹tile,&tape))
   { ENSURE(false,"error in initâ‚‹structa."); }
   uint16_t material[] = { 1, 2, 3, 4, 5, 6, 7 };
   if (tape.copyâ‚‹appendâ‚‹items(7,material)) { ENSURE(false,"error in copyâ‚‹append."); }
   for (int i=0; i<7; ++i) {
     uint16_t elem = *(uint16_t *)structaâ‚‹at(i,&tape);
   }
   deinitâ‚‹structa(&tape);
}

UNITTEST(regularâ‚‹append)
{
   struct structa /* tapeâ‚‹ */ regulars; int uninitâ‚‹error=0;
   if (initâ‚‹regularpool(&regulars)) { ENSURE(false,"error in initâ‚‹symbolpool."); }
   Unicodes capture = UNICODES("beekeeper"); Nonabsolute reference;
   if (copyâ‚‹appendâ‚‹toâ‚‹regular(&regulars,capture.tetras,capture.unicodes))
   { ENSURE(false,"error appendâ‚‹toâ‚‹regular."); }
   int32_t tetras=capture.tetras;
   if (regularpoolâ‚‹datumâ‚‹text(&regulars,tetras,&reference)) 
   { ENSURE(false,"error in datumâ‚‹text."); }
   if (optionalâ‚‹uninitâ‚‹regularpool(&symbols)) { PultðŸ’¡(uninitâ‚‹error); }
}


